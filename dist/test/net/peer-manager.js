/* eslint-env mocha */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const events_1 = require("events");
const net_1 = require("../../src/net");
const base_protocol_1 = require("../../src/net/base-protocol");
class FakePeer extends net_1.NetworkPeer {
    constructor(id = '12345', addrs = new Set(['/ip4/127.0.0.1/tcp/5000'])) {
        super();
        this.used = false;
        this.id = '12345';
        this.addrs = new Set('/ip4/127.0.0.1/tcp/5000');
        this.id = id;
        this.addrs = addrs;
    }
}
class FakeProto extends base_protocol_1.BaseProtocol {
    handshake() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    constructor(id, versions, peer) {
        super(peer, {});
        this.id = id;
        this.versions = versions;
    }
}
describe('peer manager', () => {
    let nodeManager;
    let peerManager;
    let fakePeer;
    beforeEach(() => {
        nodeManager = new events_1.EventEmitter();
        peerManager = new net_1.PeerManager(nodeManager);
        fakePeer = new FakePeer();
    });
    it('should add peer', () => {
        nodeManager.emit('kitsunet:peer:connected', fakePeer);
        chai_1.expect(peerManager.peers).to.have.keys('12345');
        chai_1.expect(peerManager.peers.get('12345')).to.eql(fakePeer);
    });
    it('should remove peer', () => {
        nodeManager.emit('kitsunet:peer:disconected', fakePeer);
        chai_1.expect(peerManager.peers).to.not.have.keys('12345');
    });
    it('should retrieve peer by id', () => {
        nodeManager.emit('kitsunet:peer:connected', fakePeer);
        chai_1.expect(peerManager.getById('12345')).to.eql(fakePeer);
        chai_1.expect(fakePeer.used).to.be.eq(true);
    });
    it('should retrieve unused peers', () => {
        const peer1 = new FakePeer('12345');
        const peer2 = new FakePeer('678910');
        const peer3 = new FakePeer('1112131415');
        const peer4 = new FakePeer('1617181920');
        nodeManager.emit('kitsunet:peer:connected', peer1);
        nodeManager.emit('kitsunet:peer:connected', peer2);
        nodeManager.emit('kitsunet:peer:connected', peer3);
        nodeManager.emit('kitsunet:peer:connected', peer4);
        peer3.used = true;
        const peers = peerManager.getUnusedPeers();
        chai_1.expect(peers).to.have.members([peer1, peer2, peer4]);
    });
    it('should retrieve by capability', () => {
        const peer1 = new FakePeer('12345');
        peer1.protocols.set('proto1', new FakeProto('proto1', ['1.0.0'], peer1));
        const peer2 = new FakePeer('678910');
        peer2.protocols.set('proto2', new FakeProto('proto2', ['1.0.0'], peer2));
        const peer3 = new FakePeer('1112131415');
        peer3.protocols.set('proto3', new FakeProto('proto3', ['1.0.0'], peer3));
        const peer4 = new FakePeer('1617181920');
        peer4.protocols.set('proto4', new FakeProto('proto4', ['1.0.0'], peer4));
        nodeManager.emit('kitsunet:peer:connected', peer1);
        nodeManager.emit('kitsunet:peer:connected', peer2);
        nodeManager.emit('kitsunet:peer:connected', peer3);
        nodeManager.emit('kitsunet:peer:connected', peer4);
        const peers = peerManager.getByCapability({ id: 'proto3', versions: ['1.0.0'] });
        chai_1.expect(peers[0]).to.eql(peer3);
    });
});
//# sourceMappingURL=data:application/json;base64,