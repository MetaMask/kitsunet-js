export = index;
declare class index {
  constructor(provider: any);
  accounts(...args: any[]): void;
  blockNumber(...args: any[]): void;
  call(...args: any[]): void;
  coinbase(...args: any[]): void;
  compileLLL(...args: any[]): void;
  compileSerpent(...args: any[]): void;
  compileSolidity(...args: any[]): void;
  estimateGas(...args: any[]): void;
  gasPrice(...args: any[]): void;
  getBalance(...args: any[]): void;
  getBlockByHash(...args: any[]): void;
  getBlockByNumber(...args: any[]): void;
  getBlockTransactionCountByHash(...args: any[]): void;
  getBlockTransactionCountByNumber(...args: any[]): void;
  getCode(...args: any[]): void;
  getCompilers(...args: any[]): void;
  getFilterChanges(...args: any[]): void;
  getFilterLogs(...args: any[]): void;
  getLogs(...args: any[]): void;
  getStorageAt(...args: any[]): void;
  getTransactionByBlockHashAndIndex(...args: any[]): void;
  getTransactionByBlockNumberAndIndex(...args: any[]): void;
  getTransactionByHash(...args: any[]): void;
  getTransactionCount(...args: any[]): void;
  getTransactionReceipt(...args: any[]): void;
  getUncleByBlockHashAndIndex(...args: any[]): void;
  getUncleByBlockNumberAndIndex(...args: any[]): void;
  getUncleCountByBlockHash(...args: any[]): void;
  getUncleCountByBlockNumber(...args: any[]): void;
  getWork(...args: any[]): void;
  hashrate(...args: any[]): void;
  mining(...args: any[]): void;
  newBlockFilter(...args: any[]): void;
  newFilter(...args: any[]): void;
  newPendingTransactionFilter(...args: any[]): void;
  protocolVersion(...args: any[]): void;
  sendAsync(opts: any, cb: any): void;
  sendRawTransaction(...args: any[]): void;
  sendTransaction(...args: any[]): void;
  sign(...args: any[]): void;
  submitHashrate(...args: any[]): void;
  submitWork(...args: any[]): void;
  syncing(...args: any[]): void;
  uninstallFilter(...args: any[]): void;
}
