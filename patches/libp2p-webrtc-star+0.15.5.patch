patch-package
--- a/node_modules/libp2p-webrtc-star/src/index.js
+++ b/node_modules/libp2p-webrtc-star/src/index.js
@@ -16,6 +16,8 @@ const once = require('once')
 const setImmediate = require('async/setImmediate')
 const webrtcSupport = require('webrtcsupport')
 const utils = require('./utils')
+const isNode = require('detect-node')
+
 const cleanUrlSIO = utils.cleanUrlSIO
 const cleanMultiaddr = utils.cleanMultiaddr
 
@@ -30,6 +32,10 @@ class WebRTCStar {
   constructor (options) {
     options = options || {}
 
+    this.maxCons = isNode ? 50 : 4
+    this.maxCons = options.maxCons || this.maxCons
+    this.totalCons = 0
+
     this.maSelf = undefined
 
     this.sioOptions = {
@@ -56,6 +62,12 @@ class WebRTCStar {
       options = {}
     }
 
+    if (this.totalCons >= this.maxCons) {
+      const msg = `Max connections (${this.maxCons}) exceeded`
+      log(msg)
+      return callback(new Error(msg))
+    }
+
     callback = callback ? once(callback) : noop
 
     const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now()
@@ -106,10 +118,20 @@ class WebRTCStar {
       }
 
       channel.once('connect', () => {
+        if (this.totalCons >= this.maxCons) {
+          const msg = `Max connections (${this.maxCons}) exceeded`
+          log(msg)
+          return channel.destroy(new Error(msg))
+        }
+
         connected = true
+        this.totalCons++
         conn.destroy = channel.destroy.bind(channel)
 
-        channel.once('close', () => conn.destroy())
+        channel.once('close', () => {
+          this.totalCons--
+          conn.destroy()
+        })
 
         conn.getObservedAddrs = (callback) => callback(null, [ma])
 
@@ -133,6 +155,12 @@ class WebRTCStar {
     listener.listen = (ma, callback) => {
       callback = callback ? once(callback) : noop
 
+      if (this.totalCons >= this.maxCons) {
+        const msg = `Max connections (${this.maxCons}) exceeded`
+        log(msg)
+        return callback(new Error(msg))
+      }
+
       if (!webrtcSupport.support && !this.wrtc) {
         return setImmediate(() => callback(new Error('no WebRTC support')))
       }
@@ -185,6 +213,13 @@ class WebRTCStar {
         const conn = new Connection(toPull.duplex(channel))
 
         channel.once('connect', () => {
+          if (this.totalCons >= this.maxCons) {
+            const msg = `Max connections (${this.maxCons}) exceeded`
+            log(msg)
+            return channel.destroy(new Error(msg))
+          }
+
+          this.totalCons++
           conn.getObservedAddrs = (callback) => {
             return callback(null, [offer.srcMultiaddr])
           }
@@ -193,6 +228,10 @@ class WebRTCStar {
           handler(conn)
         })
 
+        channel.on('close', () => {
+          this.totalCons--
+        })
+
         channel.once('signal', (signal) => {
           offer.signal = signal
           offer.answer = true
