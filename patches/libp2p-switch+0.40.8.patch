patch-package
new file mode 100644
Binary files /dev/null and b/node_modules/libp2p-switch/.DS_Store differ
--- a/node_modules/libp2p-switch/src/dial.js
+++ b/node_modules/libp2p-switch/src/dial.js
@@ -5,6 +5,7 @@ const Connection = require('interface-connection').Connection
 const setImmediate = require('async/setImmediate')
 const Circuit = require('libp2p-circuit')
 const waterfall = require('async/waterfall')
+const pull = require('pull-stream')
 
 const debug = require('debug')
 const log = debug('libp2p:switch:dial')
@@ -382,6 +383,13 @@ class Dialer {
           return nextTransport(tKeys.shift())
         }
 
+        if (this.switch.muxedConns[b58Id] || this.switch.conns[b58Id]) {
+          const msg = `connection already exists, cleaning up recent conn for ${b58Id}`
+          log(msg)
+          pull(pull.empty(), _conn)
+          return callback(new Error(msg))
+        }
+
         const conn = observeConnection(transport, null, _conn, this.switch.observer)
         callback(null, conn)
       })
--- a/node_modules/libp2p-switch/src/limit-dialer/index.js
+++ b/node_modules/libp2p-switch/src/limit-dialer/index.js
@@ -23,6 +23,7 @@ class LimitDialer {
     this.perPeerLimit = perPeerLimit
     this.dialTimeout = dialTimeout
     this.queues = new Map()
+    this.dialing = new Map()
   }
 
   /**
@@ -74,6 +75,12 @@ class LimitDialer {
    */
   dialSingle (peer, transport, addr, token, callback) {
     const ps = peer.toB58String()
+    const addrStr = addr.toString()
+    if (this.dialing.has(addrStr)) {
+      return callback(new Error(`dial already in progress for ${addrStr}`))
+    }
+    this.dialing.set(addrStr, true)
+
     log('dialSingle: %s:%s', ps, addr.toString())
     let q
     if (this.queues.has(ps)) {
@@ -83,7 +90,10 @@ class LimitDialer {
       this.queues.set(ps, q)
     }
 
-    q.push(transport, addr, token, callback)
+    q.push(transport, addr, token, (err, res) => {
+      this.dialing.delete(addrStr)
+      callback(err, res)
+    })
   }
 }
 
--- a/node_modules/libp2p-switch/src/limit-dialer/queue.js
+++ b/node_modules/libp2p-switch/src/limit-dialer/queue.js
@@ -45,9 +45,10 @@ class DialQueue {
       }
 
       if (token.cancel) {
-        log('work:cancel')
+        log(`work:cancel for ${addr.toString()}`)
         // clean up already done dials
-        pull(pull.empty(), conn)
+        // pull(pull.empty(), conn)
+        conn.close()
         // TODO: proper cleanup once the connection interface supports it
         // return conn.close(() => callback(new Error('Manual cancel'))
         return callback(null, {cancel: true})
@@ -75,15 +76,31 @@ class DialQueue {
    * @private
    */
   _dialWithTimeout (transport, addr, callback) {
+    let isTimedout = false
     timeout((cb) => {
       const conn = transport.dial(addr, (err) => {
         if (err) {
           return cb(err)
         }
 
+        // ideally the timeout to transport.dial should take care of this, but
+        // if the transport doesn't support it for some reason, we do this to
+        // prevent sockets from leacking
+        if (isTimedout) {
+          const msg = new Error(`already timed out - closing remote connection`)
+          log(msg)
+          return conn.close(msg) // don't call cb(), it'll be a noop because of prev timeout
+        }
+
         cb(null, conn)
       })
-    }, this.dialTimeout)(callback)
+    }, this.dialTimeout)((err, res) => {
+      if (err) {
+        isTimedout = true
+      }
+
+      callback(err, res)
+    })
   }
 
   /**
--- a/node_modules/libp2p-switch/src/transport.js
+++ b/node_modules/libp2p-switch/src/transport.js
@@ -12,7 +12,7 @@ const defaultPerPeerRateLimit = 8
 
 // the amount of time a single dial has to succeed
 // TODO this should be exposed as a option
-const dialTimeout = 30 * 1000
+const dialTimeout = 60 * 1000
 
 /**
  * Manages the transports for the switch. This simplifies dialing and listening across
