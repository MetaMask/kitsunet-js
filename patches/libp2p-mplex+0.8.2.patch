patch-package
--- a/node_modules/libp2p-mplex/src/internals/index.js
+++ b/node_modules/libp2p-mplex/src/internals/index.js
@@ -10,8 +10,9 @@ const Channel = require('./channel')
 /* :: import type {ChannelOpts} from './channel' */
 
 const SIGNAL_FLUSH = Buffer.from([0])
-
 const empty = Buffer.alloc(0)
+
+const POOL_SIZE = 10 * 1024
 let pool = Buffer.alloc(10 * 1024)
 let used = 0
 
@@ -26,7 +27,7 @@ type ChannelCallback = (Channel) => void
 */
 
 class Multiplex extends stream.Duplex {
-  constructor (opts/* :: ?: MultiplexOpts | ChannelCallback */, onchannel /* :: ?: ChannelCallback */) {
+  constructor(opts/* :: ?: MultiplexOpts | ChannelCallback */, onchannel /* :: ?: ChannelCallback */) {
     super()
     if (typeof opts === 'function') {
       onchannel = opts
@@ -84,13 +85,13 @@ class Multiplex extends stream.Duplex {
   }
 
   // Generate the next stream id
-  _nextStreamId ()/* : number */ {
+  _nextStreamId()/* : number */ {
     let id = this._nextId
     this._nextId += 2
     return id
   }
 
-  createStream (name/* : Buffer | string */, opts/* : ChannelOpts */)/* : Channel */ {
+  createStream(name/* : Buffer | string */, opts/* : ChannelOpts */)/* : Channel */ {
     if (this.destroyed) {
       throw new Error('Multiplexer is destroyed')
     }
@@ -103,7 +104,7 @@ class Multiplex extends stream.Duplex {
     return this._addChannel(channel, id, this._local)
   }
 
-  receiveStream (name/* : Buffer | string */, opts/* : ChannelOpts */)/* : Channel */ {
+  receiveStream(name/* : Buffer | string */, opts/* : ChannelOpts */)/* : Channel */ {
     if (this.destroyed) {
       throw new Error('Multiplexer is destroyed')
     }
@@ -133,21 +134,22 @@ class Multiplex extends stream.Duplex {
     return channel
   }
 
-  createSharedStream (name/* : Buffer | string */, opts/* : ChannelOpts */)/* : stream.Duplex */ {
+  createSharedStream(name/* : Buffer | string */, opts/* : ChannelOpts */)/* : stream.Duplex */ {
     this.log('createSharedStream')
-    return duplexify(this.createStream(name, Object.assign(opts, {lazy: true})), this.receiveStream(name, opts))
+    return duplexify(this.createStream(name, Object.assign(opts, { lazy: true })), this.receiveStream(name, opts))
   }
 
-  _name (name/* : Buffer | string */)/* : Buffer | string */ {
+  _name(name/* : Buffer | string */)/* : Buffer | string */ {
     if (!this._binaryName) {
       return name.toString()
     }
     return Buffer.isBuffer(name) ? name : Buffer.from(name)
   }
 
-  _send (header/* : number */, data /* :: ?: Buffer */)/* : bool */ {
+  _send(header/* : number */, data /* :: ?: Buffer */)/* : bool */ {
     const len = data ? data.length : 0
     const oldUsed = used
+    let drained = true
 
     this.log('_send', header, len)
 
@@ -156,25 +158,21 @@ class Multiplex extends stream.Duplex {
     varint.encode(len, pool, used)
     used += varint.encode.bytes
 
-    let buf = pool.slice(oldUsed, used)
+    drained = this.push(pool.slice(oldUsed, used))
 
     if (pool.length - used < 100) {
-      pool = Buffer.alloc(10 * 1024)
+      pool = Buffer.alloc(POOL_SIZE)
       used = 0
     }
 
     if (data) {
-      buf = Buffer.concat([
-        buf,
-        data
-      ])
+      drained = this.push(data)
     }
 
-    // Push and return the results
-    return this.push(buf)
+    return drained
   }
 
-  _addChannel (channel/* : Channel */, id/* : number */, list/* : Array<Channel|null> */)/* : Channel */ {
+  _addChannel(channel/* : Channel */, id/* : number */, list/* : Array<Channel|null> */)/* : Channel */ {
     this.log('_addChannel', id)
     list[id] = channel
     channel.on('finalize', () => {
@@ -186,7 +184,7 @@ class Multiplex extends stream.Duplex {
     return channel
   }
 
-  _writeVarint (data/* : Buffer */, offset/* : number */)/* : number */ {
+  _writeVarint(data/* : Buffer */, offset/* : number */)/* : number */ {
     for (offset; offset < data.length; offset++) {
       if (this._ptr === this._buf.length) {
         return this._lengthError(data)
@@ -201,8 +199,8 @@ class Multiplex extends stream.Duplex {
           this._channel = header >> 3
           this._list = this._type & 1 ? this._local : this._remote
           const chunked = this._list.length > this._channel &&
-                this._list[this._channel] &&
-                this._list[this._channel].chunked
+            this._list[this._channel] &&
+            this._list[this._channel].chunked
 
           this._chunked = Boolean(this._type === 1 || this._type === 2) && chunked
         } else {
@@ -222,12 +220,12 @@ class Multiplex extends stream.Duplex {
     return data.length
   }
 
-  _lengthError (data/* : Buffer */)/* : number */ {
+  _lengthError(data/* : Buffer */)/* : number */ {
     this.destroy(new Error('Incoming message is too big'))
     return data.length
   }
 
-  _writeMessage (data/* : Buffer */, offset/* : number */)/* : number */ {
+  _writeMessage(data/* : Buffer */, offset/* : number */)/* : number */ {
     const free = data.length - offset
     const missing = this._missing
 
@@ -242,6 +240,12 @@ class Multiplex extends stream.Duplex {
         this._push(data.slice(offset, data.length))
         return data.length
       }
+
+      if (missing > POOL_SIZE) {
+        this.log(new Error(`Can't allocate buffer larger than ${POOL_SIZE}, channel might be corrupt!`))
+        return this.destroy()
+      }
+
       this._message = Buffer.alloc(missing)
     }
 
@@ -259,7 +263,7 @@ class Multiplex extends stream.Duplex {
     return data.length
   }
 
-  _push (data/* : Buffer */) {
+  _push(data/* : Buffer */) {
     this.log('_push', data.length)
     if (!this._missing) {
       this._ptr = 0
@@ -321,11 +325,11 @@ class Multiplex extends stream.Duplex {
           stream._awaitDrain++
         }
         break
-      default: {}
+      default: { }
     }
   }
 
-  _onchanneldrain (drained/* : number */) {
+  _onchanneldrain(drained/* : number */) {
     this._awaitChannelDrains -= drained
 
     if (this._awaitChannelDrains) {
@@ -340,7 +344,7 @@ class Multiplex extends stream.Duplex {
     }
   }
 
-  _write (data/* : Buffer */, enc/* : string */, cb/* : () => void */) {
+  _write(data/* : Buffer */, enc/* : string */, cb/* : () => void */) {
     this.log('_write', data.length)
     if (this._finished) {
       cb()
@@ -377,7 +381,7 @@ class Multiplex extends stream.Duplex {
     }
   }
 
-  _finish (cb/* : () => void */) {
+  _finish(cb/* : () => void */) {
     this._onuncork(() => {
       if (this._writableState.prefinished === false) {
         this._writableState.prefinished = true
@@ -387,19 +391,19 @@ class Multiplex extends stream.Duplex {
     })
   }
 
-  cork () {
+  cork() {
     if (++this._corked === 1) {
       this.emit('cork')
     }
   }
 
-  uncork () {
+  uncork() {
     if (this._corked && --this._corked === 0) {
       this.emit('uncork')
     }
   }
 
-  end (data/* :: ?: Buffer | () => void */, enc/* :: ?: string | () => void */, cb/* :: ?: () => void */) {
+  end(data/* :: ?: Buffer | () => void */, enc/* :: ?: string | () => void */, cb/* :: ?: () => void */) {
     this.log('end')
     if (typeof data === 'function') {
       cb = data
@@ -421,7 +425,7 @@ class Multiplex extends stream.Duplex {
     return stream.Writable.prototype.end.call(this, cb)
   }
 
-  _onuncork (fn/* : () => void */) {
+  _onuncork(fn/* : () => void */) {
     if (this._corked) {
       this.once('uncork', fn)
       return
@@ -430,13 +434,13 @@ class Multiplex extends stream.Duplex {
     fn()
   }
 
-  _read () {
+  _read() {
     while (this._ondrain.length) {
       this._ondrain.shift()()
     }
   }
 
-  _clear () {
+  _clear() {
     this.log('_clear')
     if (this._finished) {
       return
@@ -458,16 +462,16 @@ class Multiplex extends stream.Duplex {
     this.push(null)
   }
 
-  finalize () {
+  finalize() {
     this._clear()
   }
 
-  destroy (err/* :: ?: Error */) {
+  _destroy(err/* :: ?: Error */) {
     this.log('destroy')
-    if (this.destroyed) {
-      this.log('already destroyed')
-      return
-    }
+    // if (this.destroyed) {
+    //   this.log('already destroyed')
+    //   return
+    // }
 
     var list = this._local.concat(this._remote)
 
@@ -480,7 +484,7 @@ class Multiplex extends stream.Duplex {
 
     list.forEach(function (stream) {
       if (stream) {
-        stream.emit('error', err || new Error('underlying socket has been closed'))
+        setImmediate(() => stream.emit('error', err || new Error('underlying socket has been closed')))
       }
     })
 
