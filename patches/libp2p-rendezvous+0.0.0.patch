patch-package
--- a/node_modules/libp2p-rendezvous/src/discovery.js
+++ b/node_modules/libp2p-rendezvous/src/discovery.js
@@ -8,17 +8,21 @@ const Client = require('./client')
 const EE = require('events').EventEmitter
 
 class RendezvousDiscovery extends EE {
-  constructor() {
+  constructor (opts) {
     super()
+    opts = opts || {
+      interval: 10 * 1000
+    }
     this.swarm = null
     this._client = null
     this._discover = {}
+    this.interval = opts.interval
   }
   init (swarm, opt) {
     this.swarm = swarm
     this._client = new Client(swarm, opt)
   }
-  start(cb) {
+  start (cb) {
     log('start')
     this._loop = setInterval(this._discoverLoop.bind(this), 10 * 1000)
     this.swarm.on('peer:connect', (peer) => this._client.dial(peer))
@@ -27,16 +31,15 @@ class RendezvousDiscovery extends EE {
       cb()
     }
   }
-  stop(cb) {
+  stop (cb) {
     log('stop')
     clearInterval(this._loop)
-    this._client.stop()
     if (cb) {
       cb()
     }
   }
   // TODO: https://github.com/libp2p/specs/issues/47
-  register(ns, ttl) {
+  register (ns, ttl) {
     if (!ns) {
       ns = null // need cannonical form of "empty"
     }
@@ -44,15 +47,15 @@ class RendezvousDiscovery extends EE {
     this._discover[ns] = true
     this._client.register(ns, ttl, noop)
   }
-  unregister(ns) {
+  unregister (ns) {
     if (!ns) {
       ns = null // need cannonical form of "empty"
     }
     log('unregister', ns)
     delete this._discover[ns]
-    this._client.unregister(ns, noop)
+    this._client.unregister(ns)
   }
-  _discoverLoop() {
+  _discoverLoop () {
     log('discover loop')
     for (const ns in this._discover) {
       this._client.discover(ns, (err, peers) => {
--- a/node_modules/libp2p-rendezvous/src/server/index.js
+++ b/node_modules/libp2p-rendezvous/src/server/index.js
@@ -13,7 +13,7 @@ class Server {
   constructor (opt) {
     if (!opt) opt = {}
     this.swarm = opt.swarm
-    this.Store = opt.store || ImmutableStore
+    this.Store = !!opt.store || ImmutableStore
     this.store = this.Store.createStore(opt.storeConfig || {})
     this.gcTime = opt.gcIntv || 60 * 1000
   }
--- a/node_modules/libp2p-rendezvous/src/server/rpc.js
+++ b/node_modules/libp2p-rendezvous/src/server/rpc.js
@@ -2,7 +2,7 @@
 
 const pull = require('pull-stream')
 const ppb = require('pull-protocol-buffers')
-const {Message, MessageType, ResponseStatus} = require('../proto')
+const { Message, MessageType, ResponseStatus } = require('../proto')
 const Pushable = require('pull-pushable')
 const debug = require('debug')
 const log = debug('libp2p:rendezvous:server:rpc')
@@ -38,7 +38,7 @@ const makeResponse = (type, data) => {
 
 const handlers = { // a handler takes (peerInfo, peerIdAsB58String, StoreClass, store, msg, peerIsOnline) and returns [newStore, responseOrNull]
   [MessageType.REGISTER]: (pi, id, Store, store, msg, isOnline) => {
-    let {ns, peer, ttl} = msg.register
+    let { ns, peer, ttl } = msg.register
     log('register@%s: trying register on %s', id, ns || '<GLOBAL>')
     if (peer.id && new Id(peer.id).toB58String() !== id) { // check if this peer really owns address (TODO: get rid of that)
       log('register@%s: auth err (want %s)', id, new Id(peer.id).toB58String())
@@ -88,7 +88,7 @@ const handlers = { // a handler takes (peerInfo, peerIdAsB58String, StoreClass,
     return [store]
   },
   [MessageType.DISCOVER]: (pi, id, Store, store, msg) => {
-    let {ns, limit, cookie} = msg.discover
+    let { ns, limit, cookie } = msg.discover
     if (limit <= 0 || limit > MAX_DISCOVER_LIMIT) limit = MAX_DISCOVER_LIMIT
     log('discover@%s: discover on %s (%s peers)', id, ns || '<GLOBAL>', limit)
 
@@ -163,8 +163,10 @@ const RPC = (pi, main) => {
       if (!handler) return log('ignore@%s: invalid/unknown type %s', id, data.type) // ignore msg
       let [store, resp] = handler(pi, id, main.Store, main.store, data, () => online)
       if (resp) this.queue(resp)
-      main.store = store // update store
-      main.gc()
+      if (store) {
+        main.store = store // update store
+        main.gc()
+      }
     }, end => {
       online = false
       log('end@%s: %s', id, end)
--- a/node_modules/libp2p-rendezvous/src/server/store/immutable/index.js
+++ b/node_modules/libp2p-rendezvous/src/server/store/immutable/index.js
@@ -90,12 +90,14 @@ const removePeerFromNamespace = (store, peerTableName, peerID) => {
   log('cleaning up expired peer %s', peerID)
   // Get a version of the peer table we can modify
   let newPeerTable = getNamespaces(store).get(peerTableName)
-  // remove the Peer from it
-  newPeerTable = newPeerTable.remove(peerID)
-  // We made a modification, lets increment the revision
-  store = incrementRevision(store)
-  // Return the new store with new values
-  return setNamespaces(store, getNamespaces(store).set(peerTableName, newPeerTable))
+  if (newPeerTable) {
+    // remove the Peer from it
+    newPeerTable = newPeerTable.remove(peerID)
+    // We made a modification, lets increment the revision
+    store = incrementRevision(store)
+    // Return the new store with new values
+    return setNamespaces(store, getNamespaces(store).set(peerTableName, newPeerTable))
+  }
 }
 
 // Removes a peer from the global namespace
